(function(){"use strict";function Timer(){const e=()=>{const e=new Date;return e.getMilliseconds()/1e3+e.getSeconds()+60*e.getMinutes()};return this.response=(t=null)=>{let n=e();this.globalTime=n,this.globalDeltaTime=n-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=n-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=n-this.pauseTime-this.startTime),this.frameCounter++,n-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(n-this.oldTimeFPS),this.oldTimeFPS=n,this.frameCounter=0,null!=t&&(document.getElementById(t).innerHTML=this.getFPS())),this.oldTime=n},this.getFPS=()=>this.FPS.toFixed(3),this.globalTime=this.localTime=e(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}class Render{frameData=[0,0,0,0];frameUniformBufferIndex=5;timer=new Timer;constructor(e){this.canvas=document.getElementById(e);let t=this.canvas.getContext("webgl2");this.gl=t;const n=(e,n)=>{const i=t.createShader(e);if(t.shaderSource(i,n),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS)){let e=t.getShaderInfoLog(i);console.log("Shader compile fail: "+e)}return i};let i=n(t.VERTEX_SHADER,"#version 300 es\nprecision highp float;\nin vec3 InPosition;\n  \nout vec2 DrawPos;\nuniform float Time;\n\nuniform FrameBuffer\n{  \n  vec4 Data;\n};\n\nvoid main( void )\n{\n  gl_Position = vec4(InPosition, 1);\n  gl_Position.x += 0.1 * sin(Time);\n  DrawPos = InPosition.xy;\n}"),r=n(t.FRAGMENT_SHADER,"#version 300 es\nprecision highp float;\nout vec4 OutColor;\n\nuniform FrameBuffer\n{  \n  vec4 Data;\n};\n\nin vec2 DrawPos;\nuniform float Time;\n\nvec2 mul( vec2 z1, vec2 z2 )\n{\n  return vec2(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);\n}\nfloat Jul( vec2 z, vec2 z0 )\n{\n  for (int i = 0; i < 256; i++)\n  {\n    if (dot(z, z) > 4.0)\n      return float(i);\n    z = mul(z, z) + z0;\n  }\n  return 256.0;\n}\nvec2 Rot( float A, vec2 v )\n{\n  return mat2(vec2(cos(A), -sin(A)), vec2(sin(A), cos(A))) * v;\n}\n\nvoid main( void )\n{\n  float c = Jul(DrawPos * 2.0, vec2(0.38 + 0.30 * sin(Data[0] * 2.0 + Time), 0.47 + 0.30 * sin(Data[0] * 2.0 + 1.1 * Time))) / 256.0;\n  if (c < 0.01)\n    discard;\n  vec4 color = vec4(1, 0, 0, 1);\n  OutColor = mod(color * c, vec4(1, 1, 1, 1));\n  // OutColor = vec4(vec3(c * 4.7), mix(1.0, 0.0, c)); // vec4(1.0 * sin(DrawPos.x * 8.0 + Time * 5.0) * sin(DrawPos.y * 8.0 + Time * 2.0), abs(sin(Time)), Data.x, 1.0);\n}\n"),o=t.createProgram();if(t.attachShader(o,i),t.attachShader(o,r),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS)){let e=t.getProgramInfoLog(o);console.log("Shader program link fail: "+e)}const a=.8,s=[-.8,a,0,-.8,-.8,0,a,a,0,a,-.8,0],l=t.getAttribLocation(o,"InPosition");let m=t.createVertexArray();t.bindVertexArray(m);let c=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,c),t.bufferData(t.ARRAY_BUFFER,new Float32Array(s),t.STATIC_DRAW),-1!=l&&(t.vertexAttribPointer(l,3,t.FLOAT,!1,0,0),t.enableVertexAttribArray(l)),this.timeLoc=t.getUniformLocation(o,"Time"),this.frameBuffer=t.createBuffer(),t.bindBuffer(t.UNIFORM_BUFFER,this.frameBuffer),t.bufferData(t.UNIFORM_BUFFER,16,t.STATIC_DRAW),t.useProgram(o),t.uniformBlockBinding(o,t.getUniformBlockIndex(o,"FrameBuffer"),this.frameUniformBufferIndex)}render(){this.timer.response("fps"+this.canvas.id.slice(5));const e=this.gl;if(e.clear(e.COLOR_BUFFER_BIT),e.bindBuffer(e.UNIFORM_BUFFER,this.frameBuffer),e.bufferData(e.UNIFORM_BUFFER,new Float32Array(this.frameData),e.STATIC_DRAW),e.bindBufferBase(e.UNIFORM_BUFFER,this.frameUniformBufferIndex,this.frameBuffer),-1!=this.timeLoc){const t=new Date;let n=60*t.getMinutes()+t.getSeconds()+t.getMilliseconds()/1e3;e.uniform1f(this.timeLoc,n)}e.drawArrays(e.TRIANGLE_STRIP,0,4)}mainLoop(){const e=()=>{this.render(),window.requestAnimationFrame(e)};e()}}window.addEventListener("load",(()=>{const r1=new Render("myCan1"),r2=new Render("myCan2");r1.mainLoop(),r2.mainLoop(),document.getElementById("rate1").render=r1,document.getElementById("rate2").render=r2,document.querySelectorAll('input[type="range"]').forEach((e=>e.oninput=e=>{e.target.render.frameData[0]=e.target.value})),document.getElementById("backColor").oninput=e=>{let tag=e.target,x=tag.value,r=eval("0x"+x[1]+x[2]),g=eval("0x"+x[3]+x[4]),b=eval("0x"+x[5]+x[6]);document.querySelectorAll('input[type="range"]').forEach((e=>{e.render.gl.clearColor(r/255,g/255,b/255,1)}))}})),console.log("CGSG forever!!! mylib.js imported")})();
